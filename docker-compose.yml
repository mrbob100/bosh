version: '3'
services:

  #PHP Service
    app:
        build:
          context: .
          dockerfile: Dockerfile
        image: digitalocean.com/php
        container_name: app
        restart: unless-stopped
        tty: true
       # ports:
       #  - "3000:3000"
        environment:
          SERVICE_NAME: app
          SERVICE_TAGS: dev
        working_dir: /var/www
        volumes:
          - ./:/var/www
          - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
        networks:
          - app-network

  #Nginx Service
    webserver:
        image: nginx:alpine
        container_name: webserver
        restart: unless-stopped
        tty: true
        ports:
          - "8000:80"
          - "443:443"

        volumes:
          - ./:/var/www
          - ./nginx/conf.d/:/etc/nginx/conf.d/
        networks:
          - app-network

  #MySQL Service
    db:
        image: mysql:5.7.22
        container_name: db
        restart: unless-stopped
        tty: true
        ports:
          - "3307:3306"
        environment:
          MYSQL_DATABASE: petroglyph
          MYSQL_ROOT_PASSWORD: vl
          SERVICE_TAGS: dev
          SERVICE_NAME: mysql
        volumes:
          - dbdata:/var/lib/mysql/
          - ./mysql/my.cnf:/etc/mysql/my.cnf
        networks:
          - app-network
  # myadmin service
    phpmyadmin:
        image: phpmyadmin
        container_name: phpmyadmin
        restart: unless-stopped
        ports:
          - "8080:80"
        environment:
          - PMA_ARBITRARY=1
        networks:
          - app-network


    #npm service
    npm:
        #build: ./os
        image: node:12
        container_name: npm
        restart: unless-stopped
        tty: true
        working_dir: /var/www
       # volumes:
       #   - ./package.json:./var/www
       #   - ./package-lock.json:./var/www

        networks:
          - app-network
        links:
          - db
          - phpmyadmin
          - app
          - webserver

  #Docker Networks
networks:
    app-network:
        driver: bridge
#Volumes
volumes:
    dbdata:
        driver: local
